# -*- mode: python -*-
##### include mydir in distribution #######
import glob
import os
import sys


def extra_datas(mydir, tgtdir):
    def rec_glob(p, files):
        for d in glob.glob(p):
            if os.path.isfile(d):
                files.append(d)
            rec_glob("%s%s*" % (d, os.sep), files)
    files = []
    rec_glob("%s%s*" % (mydir, os.sep), files)
    extra_datas = []
    for f in files:
        extra_datas.append((f.replace(mydir, tgtdir), f, 'DATA'))

    return extra_datas
###########################################

a_datas = [('about.png', '.'),
           ('arrow.png', '.'),
           ('arrowd.png', '.'),
           ('arrowt.png','.'),
           ('arrowu.png','.'),
           ('biomass_g.png', '.'),
           ('blank.png', '.'),
           ('camera.png', '.'),
           ('check-mark.png', '.'),
           ('check-mark_b.png', '.'),
           ('copy.png', '.'),
           ('edit.png', '.'),
           ('exit.png', '.'),
           ('fossil_g.png', '.'),
           ('gears_run.png', '.'),
           ('grid.png', '.'),
           ('help.png', '.'),
           ('hot_rocks_g.png', '.'),
           ('hydro_g.png', '.'),
           ('info_green.png', '.'),
           ('info.png', '.'),
           ('line.png', '.'),
           ('list.png', '.'),
           ('log.png', '.'),
           ('map.png', '.'),
           ('minus.png', '.'),
           ('move.png', '.'),
           ('network.png', '.'),
           ('network_b.png', '.'),
           ('open.png', '.'),
           ('plus.png', '.'),
           ('power-plant-icon.png', '.'),
           ('power.png', '.'),
           ('question.png', '.'),
           ('quit.png', '.'),
           ('rain.png', '.'),
           ('rainbow-icon.png', '.'),
           ('refresh.png', '.'),
           ('ruler.png', '.'),
           ('save_as.png', '.'),
           ('save_d.png', '.'),
           ('save.png', '.'),
           ('scada_vs_sam_2014_detailed.png', '.'),
           ('sen_icon32.ico', '.'),
           ('sen_icon32.png', '.'),
           ('sen_logo_2.png', '.'),
           ('solar_g.png', '.'),
           ('solar_pv_g.png', '.'),
           ('storage_g.png', '.'),
           ('wave_g.png', '.'),
           ('weather.png', '.'),
           ('wind_g.png', '.'),
           ('zoom.png', '.'),
           ('about.html', '.'),
           ('credits.html', '.'),
           ('makeweatherfiles.html', '.'),
           ('help.html', '.'),
           ('C:\\Python27\\Lib\\site-packages\\mpl_toolkits\\basemap\\data\\epsg', 'mpl_toolkits\\basemap\\data'),
           ('..\\data_files\\Acciona AW 1500.pow', 'siren_files'),
           ('..\\data_files\\Enercon E40.pow', 'siren_files'),
           ('..\\data_files\\Enercon E40 _500kw(MT).pow', 'siren_files'),
           ('..\\data_files\\Enercon E48_48m _800kw(MT).pow', 'siren_files'),
           ('..\\data_files\\Enercon E53_52.9m _800kw(MT).pow', 'siren_files'),
           ('..\\data_files\\Enercon E66_1870kw(MG).pow', 'siren_files'),
           ('..\\data_files\\Enercon E70_71m _2300kw(MT).pow', 'siren_files'),
           ('..\\data_files\\GE Energy 1.7-100.pow', 'siren_files'),
           ('..\\data_files\\Goldwind_GW82_1500.pow', 'siren_files'),
           ('..\\data_files\\Goldwind_GW90_2500.pow', 'siren_files'),
           ('..\\data_files\\Vergnet GEV MP 275 kW.pow', 'siren_files'),
           ('..\\data_files\\Vestas V27-225Kw.pow', 'siren_files'),
           ('..\\windpower_variables.xls', 'siren_files'),
           ('..\\pvwattsv5_variables.xls', 'siren_files'),
           ('..\\tcsmolten_salt_variables.xls', 'siren_files'),
           ('..\\biomass_variables.xls', 'siren_files'),
           ('..\\annualoutput_variables.xls', 'siren_files'),
           ('..\\ippppa_variables.xls', 'siren_files'),
           ('..\\blank.jpg', 'siren_files'),
           ('..\\data_files\\Wind Turbines.csv', 'siren_files'),
           ('..\\data_files\\Wind Turbines Subset.csv', 'siren_files'),
           ('colours.py', 'source'),
           ('credits.py', 'source'),
           ('dijkstra_4.py', 'source'),
           ('displayobject.py', 'source'),
           ('displaytable.py', 'source'),
           ('editini.py', 'source'),
           ('floatlegend.py', 'source'),
           ('floatmenu.py', 'source'),
           ('floatstatus.py', 'source'),
           ('getmap.py', 'source'),
           ('grid.py', 'source'),
           ('indexweather.py', 'source'),
           ('inisyntax.py', 'source'),
           ('makegrid.py', 'source'),
           ('makerainfall2.py', 'source'),
           ('makeweatherfiles.py', 'source'),
           ('makeweather2.py', 'source'),
           ('newstation.py', 'source'),
           ('plotweather.py', 'source'),
           ('powermodel.py', 'source'),
           ('sammodels.py', 'source'),
           ('samrun.py', 'source'),
           ('senuser.py', 'source'),
           ('siren.py', 'source'),
           ('sirenicons.py', 'source'),
           ('sirenm.py', 'source'),
           ('ssc.py', 'source'),
           ('station.py', 'source'),
           ('towns.py', 'source'),
           ('turbine.py', 'source'),
           ('updateswis.py', 'source'),
           ('viewresource.py', 'source'),
           ('wascene.py', 'source')
          ]
a = Analysis(['sirenm.py'],
             pathex=['.'],
             datas=a_datas,
             hookspath=None,
             hiddenimports=['FileDialog', 'multiprocessing.util', 'scipy.linalg',
                            'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack',
                            'scipy.integrate', 'Tkinter'],
             runtime_hooks=None)
block_cipher = None
grd_datas = None
grd_a = Analysis(['makegrid.py'],
             pathex=['.'],
             binaries=None,
             datas=grd_datas,
             hiddenimports=['FileDialog', 'multiprocessing.util', 'scipy.linalg',
                            'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack',
                            'scipy.integrate', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
map_datas = [('world.jpg', '.')]
map_a = Analysis(['getmap.py'],
             pathex=['.'],
             binaries=None,
             datas=map_datas,
             hiddenimports=['FileDialog', 'multiprocessing.util''scipy.linalg', 'scipy.linalg.cython_blas',
                            'scipy.linalg.cython_lapack', 'scipy.integrate', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
ndx_datas = None
ndx_a = Analysis(['indexweather.py'],
             pathex=['.'],
             binaries=None,
             datas=ndx_datas,
             hiddenimports=['FileDialog', 'netCDF4_utils', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
ran_datas = None
ran_a = Analysis(['makerainfall2.py'],
             pathex=['.'],
             binaries=None,
             datas=ran_datas,
             hiddenimports=['FileDialog', 'netCDF4_utils', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
wea_datas = None
wea_a = Analysis(['makeweather2.py'],
             pathex=['.'],
             binaries=None,
             datas=wea_datas,
             hiddenimports=['FileDialog', 'netCDF4_utils', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
sws_datas = None
sws_a = Analysis(['updateswis.py'],
             pathex=['.'],
             binaries=None,
             datas=sws_datas,
             hiddenimports=['FileDialog', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
srn_datas = None
srn_a = Analysis(['siren.py'],
             pathex=['.'],
             binaries=None,
             datas=srn_datas,
             hiddenimports=['FileDialog', 'Tkinter'],
             hookspath=None,
             runtime_hooks=None,
             excludes=None,
             win_no_prefer_redirects=None,
             win_private_assemblies=None,
             cipher=block_cipher)
MERGE( (a, 'sirenm', 'sirenm'), (grd_a, 'makegrid', 'makegrid'), (map_a, 'getmap', 'getmap'),
       (ndx_a, 'indexweather', 'indexweather'), (ran_a, 'makerainfall2', 'makerainfall2'),
       (wea_a, 'makeweather2', 'makeweather2'), (sws_a, 'updateswis', 'updateswis'),
       (srn_a, 'siren', 'siren') )
pyz = PYZ(a.pure)
exe = EXE(pyz,
          a.scripts,
          exclude_binaries=True,
          name='sirenm.exe',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='sirenm_version',
          icon='sen_icon32.ico')
# append the 'sam_sdk' dir
a.datas += extra_datas('sam-sdk-2016-03-14', 'sam-sdk')

coll = COLLECT(exe,
               a.binaries,
               a.zipfiles,
               a.datas + [('COPYING.txt', 'GNU Affero General Public License Windows.txt', 'DATA'),
                          ('SIREN.ini', 'SIREN_windows_sample.ini', 'DATA'),
                          ('SIREN_default.ini', 'siren_default.ini', 'DATA'),
                          ('siren_windows_default.ini', 'siren_windows_default.ini', 'DATA')],
               strip=None,
               upx=True,
               name='siren')

grd_pyz = PYZ(grd_a.pure, grd_a.zipped_data,
             cipher=block_cipher)
grd_exe = EXE(grd_pyz,
          grd_a.scripts,
          exclude_binaries=True,
          name='makegrid',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='makegrid_version',
          icon='sen_icon32.ico')
grd_coll = COLLECT(grd_exe,
               grd_a.binaries,
               grd_a.zipfiles,
               grd_a.datas,
               strip=None,
               upx=True,
               name='makegrid')

map_pyz = PYZ(map_a.pure, map_a.zipped_data,
             cipher=block_cipher)
map_exe = EXE(map_pyz,
          map_a.scripts,
          exclude_binaries=True,
          name='getmap',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='getmap_version',
          icon='sen_icon32.ico')
map_coll = COLLECT(map_exe,
               map_a.binaries,
               map_a.zipfiles,
               map_a.datas,
               strip=None,
               upx=True,
               name='getmap')

ndx_pyz = PYZ(map_a.pure, ndx_a.zipped_data,
             cipher=block_cipher)
ndx_exe = EXE(ndx_pyz,
          ndx_a.scripts,
          exclude_binaries=True,
          name='indexweather',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='indexweather_version',
          icon='sen_icon32.ico')
ndx_coll = COLLECT(ndx_exe,
               ndx_a.binaries,
               ndx_a.zipfiles,
               ndx_a.datas,
               strip=None,
               upx=True,
               name='indexweather')

ran_pyz = PYZ(ran_a.pure, ran_a.zipped_data,
             cipher=block_cipher)
ran_exe = EXE(ran_pyz,
          ran_a.scripts,
          exclude_binaries=True,
          name='makerainfall2',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='makerainfall2_version',
          icon='sen_icon32.ico')
ran_coll = COLLECT(ran_exe,
               ran_a.binaries,
               ran_a.zipfiles,
               ran_a.datas,
               strip=None,
               upx=True,
               name='makerainfall2')

wea_pyz = PYZ(wea_a.pure, wea_a.zipped_data,
             cipher=block_cipher)
wea_exe = EXE(wea_pyz,
          wea_a.scripts,
          exclude_binaries=True,
          name='makeweather2',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='makeweather2_version',
          icon='sen_icon32.ico')
wea_coll = COLLECT(wea_exe,
               wea_a.binaries,
               wea_a.zipfiles,
               wea_a.datas,
               strip=None,
               upx=True,
               name='makeweather2')

sws_pyz = PYZ(sws_a.pure, sws_a.zipped_data,
             cipher=block_cipher)
sws_exe = EXE(sws_pyz,
          sws_a.scripts,
          exclude_binaries=True,
          name='updateswis',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='updateswis_version',
          icon='sen_icon32.ico')

sws_coll = COLLECT(sws_exe,
               sws_a.binaries,
               sws_a.zipfiles,
               sws_a.datas,
               strip=None,
               upx=True,
               name='updateswis')

srn_pyz = PYZ(srn_a.pure, srn_a.zipped_data,
             cipher=block_cipher)
srn_exe = EXE(srn_pyz,
          srn_a.scripts,
          exclude_binaries=True,
          name='siren',
          debug=False,
          strip=None,
          upx=True,
          console=False,
          version='siren_version',
          icon='sen_icon32.ico')

srn_coll = COLLECT(srn_exe,
               srn_a.binaries,
               srn_a.zipfiles,
               srn_a.datas,
               strip=None,
               upx=True,
               name='sirens')
